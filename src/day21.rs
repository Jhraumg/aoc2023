use itertools::Itertools;
use num::Integer;
use std::collections::{HashMap, HashSet};
use std::str::FromStr;

#[derive(Debug)]
struct Garden {
    rocks: HashSet<(usize, usize)>,
    maxx: usize,
    maxy: usize,
    start: (usize, usize),
}
impl FromStr for Garden {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let rocks: HashSet<_> = s
            .lines()
            .filter(|l| !l.is_empty())
            .enumerate()
            .flat_map(|(j, l)| {
                l.trim()
                    .chars()
                    .enumerate()
                    .filter_map(move |(i, c)| if c == '#' { Some((i, j)) } else { None })
            })
            .collect();
        let start = s
            .lines()
            .filter(|l| !l.is_empty())
            .enumerate()
            .flat_map(|(j, l)| {
                l.trim()
                    .chars()
                    .enumerate()
                    .filter_map(move |(i, c)| if c == 'S' { Some((i, j)) } else { None })
            })
            .next()
            .unwrap();
        let maxx = s.lines().filter(|l| !l.is_empty()).map(|l| l.trim().len()).max().unwrap();
        let maxy = s.lines().filter(|l| !l.is_empty()).count();
        assert_eq!(maxx, maxx);
        Ok(Self {
            rocks,
            maxx,
            maxy,
            start,
        })
    }
}

impl Garden {
    fn step(&self, pos: (usize, usize)) -> Vec<(usize, usize)> {
        let (x, y) = pos;
        let west = if x > 0 { Some((x - 1, y)) } else { None };
        let north = if y > 0 { Some((x, y - 1)) } else { None };
        let east = if x + 1 < self.maxx {
            Some((x + 1, y))
        } else {
            None
        };
        let south = if y + 1 < self.maxy {
            Some((x, y + 1))
        } else {
            None
        };
        [north, west, south, east]
            .into_iter()
            .flatten()
            .filter(|(x, y)| !self.rocks.contains(&(*x, *y)))
            .collect()
    }
    fn naive_pos_after_n_steps(&self, n: usize) -> usize {
        let mut cur_pos: Vec<(usize, usize)> = vec![self.start];
        for _ in 0..n {
            cur_pos = cur_pos
                .into_iter()
                .flat_map(|p| self.step(p).into_iter())
                .filter(|(x, y)| !self.rocks.contains(&(*x, *y)))
                .unique()
                .collect();
        }
        for y in 0..self.maxy {
            println!(
                "{}",
                (0..self.maxx)
                    .map(|x| if self.rocks.contains(&(x, y)) {
                        "#"
                    } else if cur_pos.contains(&(x, y)) {
                        "O"
                    } else {
                        "."
                    })
                    .join("")
            );
        }
        cur_pos.len()
    }
    fn istep(&self, pos: (isize, isize)) -> [(isize, isize); 4] {
        let (x, y) = pos;
        [(x, y - 1), (x - 1, y), (x, y + 1), (x + 1, y)]
    }

    fn pos_after_n_steps(&self, n: usize) -> usize {
        // une fois que l'algo marchera
        let mut on: HashSet<(isize, isize)> = HashSet::with_capacity(4 * n);
        let mut count = 0;
        let mut previous_on: HashSet<(isize, isize)> = HashSet::with_capacity(4 * n);
        let mut previous_previous_on: HashSet<(isize, isize)> = HashSet::with_capacity(4 * n);
        let mut previous_on_count = 1;
        let mut previous_previous_on_count = 0;

        previous_on.insert((self.start.0 as isize, self.start.1 as isize));

        for i in 0..=n {
            let on: HashSet<_> = previous_on
                .iter()
                .copied()
                .flat_map(|(x, y)| {
                    self.istep((x, y)).into_iter().filter(|(x, y)| {
                        !previous_previous_on.contains(&(*x, *y)) && {
                            let x =
                                (x % self.maxx as isize + self.maxx as isize) as usize % self.maxx;
                            let y =
                                (y % self.maxy as isize + self.maxy as isize) as usize % self.maxy;
                            !self.rocks.contains(&(x, y))
                        }
                    })
                })
                .collect();
            let save = previous_on_count;
            let new = on.len();
            previous_on_count = count;
            count = previous_previous_on_count + new;
            previous_previous_on_count = save;
            if i % 1000 == 0 {
                println!("{i:3} (+{new} elt) pp {previous_previous_on_count}, p {previous_on_count}, current {count}");
            }

            // println!("on {on:?}");
            previous_previous_on = previous_on;
            previous_on = on;
        }

        count
    }

    fn infinite_pos_after_n_steps(&self, n: usize) -> usize {
        /// if there was no rocks, then, the maping would be
        /// 0:
        /// ```
        /// o
        /// ```
        /// 1:
        ///```
        ///  o
        /// o o
        ///  o
        ///```
        /// 2:
        ///```
        ///  o
        /// o o
        ///o o o
        /// o o
        ///  o
        ///```
        /// (n+1)Â² (a square of len n+1)
        ///
        /// starting from (0,0), a point p(i,j) would be  reached at i+j and would be lit at each n >= i+j, n%2 == (i+j)%2
        /// ~~we just need to adjust for~~
        /// - ~~the rocks which are always off~~ **no, they also make the path to other point longer !**
        /// - the start (but we always start in the middle of the garden
        // FIXME We can compute distance to S with a simple loop
        let start_to_rocks: Vec<usize> = self
            .rocks
            .iter()
            .map(|(x, y)| x.abs_diff(self.start.0) + y.abs_diff(self.start.1))
            .collect();
        let period = self.maxx as isize;
        let nisize = n as isize;
        let m = 1 + nisize / period;

        let rocks_on = (-m..=m)
            .flat_map(|j| (-m..=m).map(move |i| (i + j) * period))
            .map(|full_d| {
                start_to_rocks
                    .iter()
                    .filter(move |d| (**d as isize + full_d).abs() <= nisize)
                    .map(move |d| (*d as isize + full_d) % 2 == nisize % 2)
            })
            .count();
        (n + 1) * (n + 1) - 4 * dbg!(rocks_on)
    }
}
pub fn walk_exercise() {
    let garden: Garden = include_str!("../resources/day21_garden.txt").parse().unwrap();
    let max_pos = garden.pos_after_n_steps(64);
    println!("pos after 64 steps : {max_pos}");
    let max_pos = garden.pos_after_n_steps(26501365);
    println!("pos after 26501365 steps : {max_pos}");
}
#[cfg(test)]
mod tests {
    use super::*;
    use indoc::indoc;
    #[test]
    fn aoc_example_works() {
        let garden: Garden = indoc! {"
            ...........
            .....###.#.
            .###.##..#.
            ..#.#...#..
            ....#.#....
            .##..S####.
            .##..#...#.
            .......##..
            .##.#.####.
            .##..##.##.
            ...........
        "}
        .parse()
        .unwrap();
        // assert_eq!(16, garden.naive_pos_after_n_steps(6));
        assert_eq!(16, garden.pos_after_n_steps(6));
        assert_eq!(50, garden.pos_after_n_steps(10));
        // assert_eq!(50, garden.infinite_pos_after_n_steps(10));
        // assert_eq!(167004, garden.infinite_pos_after_n_steps(500));
        // assert_eq!(668697, garden.infinite_pos_after_n_steps(1000));
        // assert_eq!(16733044, garden.infinite_pos_after_n_steps(5000));

        //
        //
        // let garden: Garden = indoc! {"
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##..S####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        //     ..............................................................................................................
        //     .....###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#......###.#.
        //     .###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#..###.##..#.
        //     ..#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#....#.#...#..
        //     ....#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#........#.#....
        //     .##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####..##...####.
        //     .##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#..##..#...#.
        //     .......##.........##.........##.........##.........##.........##.........##.........##.........##.........##..
        //     .##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####..##.#.####.
        //     .##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##..##..##.##.
        //     ..............................................................................................................
        // "}
        //     .parse()
        //     .unwrap();
        // // assert_eq!(50, garden.naive_pos_after_n_steps(10));
        // assert_eq!(1594, garden.naive_pos_after_n_steps(50));
    }
}
// 7154 too high
